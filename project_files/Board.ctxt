#BlueJ class context
comment0.target=Board
comment1.params=
comment1.target=Board()
comment1.text=\n\ Constructor\ for\ the\ Board\ class\n\ Initializes\ the\ board\ with\ 12\ rows\ and\ columns\n\ and\ sets\ all\ locations\ to\ VACANT\n
comment10.params=x\ y
comment10.target=boolean\ isFoundItem(int,\ int)
comment10.text=\n\ Check\ if\ a\ given\ piece\ is\ part\ of\ an\ item\ that\ has\ been\ found\ by\ the\ player\n\ Throw\ an\ exeption\ if\ the\ piece\ is\ not\ in\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @return\ true\ if\ a\ given\ piece\ is\ part\ of\ a\ found\ item,\ false\ otherwise\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment11.params=x\ y
comment11.target=void\ setFoundItem(int,\ int)
comment11.text=\n\ Sets\ the\ given\ piece\ to\ be\ part\ of\ a\ found\ item\ (i.e.\ an\ item\ is\ hidden\ at\n\ this\ location\ and\ this\ piece\ has\ been\ found\ by\ the\ player)\n\ Throw\ an\ exception\ if\ the\ piece\ is\ not\ on\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment12.params=x\ y
comment12.target=boolean\ isSearched(int,\ int)
comment12.text=\n\ Check\ if\ a\ given\ piece\ has\ been\ searched\ by\ the\ player\ (but\ does\ not\ contain\n\ any\ part\ of\ a\ hidden\ item)\n\ Throw\ an\ exeption\ if\ the\ piece\ is\ not\ in\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @return\ true\ if\ a\ given\ piece\ is\ part\ of\ a\ found\ item,\ false\ otherwise\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment13.params=x\ y
comment13.target=void\ setSearched(int,\ int)
comment13.text=\n\ Sets\ the\ given\ piece\ to\ "searched"\ (i.e.\ no\ item\ has\ been\ hidden\ at\ this\n\ location\ and\ the\ player\ has\ searched\ this\ space)\n\ Throw\ an\ exception\ if\ the\ piece\ is\ not\ on\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment14.params=x\ y
comment14.target=boolean\ searchSpace(int,\ int)
comment14.text=\n\ Sets\ the\ given\ piece\ to\ a\ new\ state,\ after\ it\ has\ been\ searched\ according\ to\n\ the\ following\ rules\:\n\ 1)\ If\ the\ space\ is\ currently\ VACANT,\ set\ it\ to\ SEARCHED\n\ 2)\ If\ the\ space\ is\ currently\ LOST,\ set\ it\ to\ FOUND\n\ 3)\ Return\ true\ if\ the\ search\ was\ successful\ (or\ unnecessary),\ false\ otherwide\n\ @param\ x\n\ @param\ y\n\ @return\ true\ if\ the\ search\ was\ successful\ (or\ unnecessary),\ false\ otherwise\n
comment15.params=touchedX\ touchedY
comment15.target=int[]\ getClosestItem(int,\ int)
comment15.text=\n\ Find\ the\ closest\ lost\ item\ piece\ to\ the\ piece\ that\ has\ just\ been\ touched\ (at\ [touchedX,\ touchedY]).\n\ Return\ the\ "number\ of\ spaces\ away"\ that\ the\ closest\ lost\ item\ is.\n\ An\ item\ is\ considered\ "the\ closest"\ if\ the\ "number\ of\ spaces\ away\ in\ the\ x\ direction"\ \n\ plus\ the\ "number\ of\ spaces\ away\ in\ the\ y\ direction"\ is\ minimal.\n\ @param\ touchedX\ the\ x\ coordinate\ of\ the\ touched\ point\n\ @param\ touchedY\ the\ y\ coordinate\ of\ the\ touched\ point\n\ @return\ an\ array\ of\ size\ 2\ containing\ the\ number\ of\ spaces\ away\ \n\ in\ the\ X\ direction\ and\ the\ number\ of\ spaces\ away\ in\ the\ Y\ direction\ \n\ where\ the\ array\ is\ in\ the\ form\ [x,\ y]\n
comment16.params=item
comment16.target=boolean\ checkForFoundItem(Item)
comment16.text=\n\ Checks\ if\ a\ whole\ item\ has\ been\ found\ on\ the\ board\n\ An\ item\ is\ considered\ "found"\ if\ there\ are\ a\ cluster\ of\ spaces\ on\ the\ board\ that\ \n\ have\ a\ value\ of\ FOUNDITEM,\ and\ that\ cluster\ is\ in\ the\ shape\ of\ the\ item.\ \n\ @param\ item\ the\ item\ to\ check.\n\ @return\ true\ if\ the\ item\ has\ been\ found,\ false\ otherwise.\n
comment17.params=items
comment17.target=java.util.ArrayList\ getFoundItemsList(Item[])
comment17.text=\n\ Goes\ through\ a\ list\ of\ items\ and\ checks\ which\ of\ the\ items\ have\ been\ found.\n\ (hint\:\ use\ a\ helper\ method\ that\ you\ have\ already\ written).\n\ @return\ an\ array\ list\ of\ items\ that\ have\ been\ found.\n
comment2.params=rows\ cols\ defaultValue
comment2.target=Board(int,\ int,\ Piece)
comment2.text=\n\ Constructor\ for\ the\ Board\ class\n\ Initializes\ the\ board\ with\ the\ given\ number\ of\ rows\ and\ columns\n\ and\ sets\ all\ locations\ to\ defaultValue\n
comment3.params=
comment3.target=int\ getBoardSize()
comment3.text=\n\ Returns\ the\ size\ of\ the\ board\ as\ an\ integer\ (i.e.\ 12x12\ board\ should\ return\n\ 12)\n\ hint\:\ You\ can\ assume\ the\ grid\ is\ square\ (i.e.\ rows\ \=\=\ cols)\n\ @return\ the\ size\ of\ the\ board\n
comment4.params=x\ y
comment4.target=boolean\ isPiece(int,\ int)
comment4.text=\n\ Returns\ true\ if\ x\ and\ y\ are\ coordinates\ in\ the\ board,\ false\ otherwise\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @return\ true\ if\ x\ and\ y\ are\ coordinates\ in\ the\ board,\ false\ otherwise\n
comment5.params=x\ y
comment5.target=Piece\ getPiece(int,\ int)
comment5.text=\n\ Returns\ the\ value\ of\ the\ piece\ at\ the\ given\ coordinates\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @return\ the\ value\ of\ the\ piece\ at\ the\ given\ coordinates\n\ @throws\ IllegalArgumentException\ if\ x\ and\ y\ are\ not\ valid\ coordinates\n
comment6.params=x\ y
comment6.target=boolean\ isLostItem(int,\ int)
comment6.text=\n\ Check\ if\ a\ given\ piece\ is\ part\ of\ a\ lost\ item\n\ Throw\ an\ exeption\ if\ the\ piece\ is\ not\ in\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @return\ true\ if\ a\ given\ piece\ is\ part\ of\ a\ lost\ item,\ false\ otherwise\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment7.params=x\ y
comment7.target=void\ setLostItem(int,\ int)
comment7.text=\n\ Sets\ the\ given\ piece\ to\ be\ part\ of\ a\ lost\ item\ (i.e.\ an\ item\ is\ hidden\ at\n\ this\ location)\n\ Throw\ an\ exception\ if\ the\ piece\ is\ not\ on\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment8.params=x\ y
comment8.target=boolean\ isVacant(int,\ int)
comment8.text=\n\ Check\ if\ a\ given\ piece\ is\ vacant\n\ Throw\ an\ exeption\ if\ the\ piece\ is\ not\ in\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @return\ true\ if\ a\ given\ piece\ is\ vacant,\ false\ otherwise\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
comment9.params=x\ y
comment9.target=void\ setVacant(int,\ int)
comment9.text=\n\ Sets\ the\ given\ piece\ to\ be\ vacant\ (i.e.\ no\ item\ is\ on\ this\ location)\n\ Throw\ an\ exception\ if\ the\ piece\ is\ not\ on\ the\ board\n\ @param\ x\ the\ x\ coordinate\n\ @param\ y\ the\ y\ coordinate\n\ @throws\ IllegalArgumentException\ if\ the\ piece\ is\ not\ in\ the\ board\n
numComments=18
